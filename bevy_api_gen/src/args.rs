use clap::Parser;
use indexmap::{IndexMap, IndexSet};
use rustdoc_types::{Crate, Item, ItemEnum, Visibility};
use serde::Deserialize;
use serde_derive::Serialize;

#[derive(Parser, Debug)]
#[clap(author, version, about, long_about = None)]
pub struct Args {
    /// Paths to json files generated by `rustdoc -p <crate> --output-format json`
    #[clap(short, long, value_parser)]
    pub json: Vec<String>,

    /// paths for which to generate wrappers with possible wildcards, import paths not matching these will be excluded from having wrappers generated
    #[clap(short, long, value_parser)]
    pub filters: Option<Vec<String>>,

    /// paths to specifically ignore from generation, opposite of filters
    #[clap(short, long, value_parser)]
    pub excludes: Option<Vec<String>>,

    /// The path to toml config file which contains the types to be wrapped and overrides
    #[clap(short, long, value_parser)]
    pub config: String,

    #[clap(short, long, value_parser, default_value = "templates")]
    pub templates: String,

    #[clap(short, long, value_parser, default_value = "generated.rs")]
    pub output: String,

    #[clap(short, long, value_parser, num_args(0..))]
    pub type_allowlist: Option<Vec<String>>,

    /// if true the excluded methods will show up as commented out code with reasons for exclusion
    #[clap(long)]
    pub print_errors: bool,
}
