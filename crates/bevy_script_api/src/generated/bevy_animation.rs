// @generated by cargo bevy-api-gen generate, modify the templates not this file

#![allow(clippy::all, unused_imports, deprecated, dead_code)]
// This file is generatedchange the template not this file
extern crate self as bevy_script_api;

use bevy::prelude::App;
use bevy_mod_scripting_core::prelude::*;
use std::sync::Mutex;

#[cfg(feature = "lua")]
use {
    crate::{lua::RegisterForeignLuaType, ReflectedValue},
    bevy_mod_scripting_lua::docs::LuaDocFragment,
    bevy_mod_scripting_lua_derive::LuaProxy,
};

/// List of keyframes for one of the attribute of a [`Transform`].

#[derive(LuaProxy)]
#[proxy(
derive(clone,debug),
remote="Keyframes",
functions[r#"
#[lua(kind = "Method", as_trait = "std::clone::Clone", output(proxy))]
    fn clone(&self) -> Keyframes;
}
"#]
)]

pub struct LuaKeyframes {}

/// Describes how an attribute of a [`Transform`] or [`MorphWeights`] should be animated.

/// `keyframe_timestamps` and `keyframes` should have the same length.

#[derive(LuaProxy)]
#[proxy(
derive(clone,debug),
remote="VariableCurve",
functions[r#"
#[lua(kind = "Method", as_trait = "std::clone::Clone", output(proxy))]
    fn clone(&self) -> VariableCurve;
}
"#]
)]

pub struct LuaVariableCurve {
    keyframe_timestamps: std::vec::Vec<f32>,

    #[lua(output(proxy))]
    keyframes: Keyframes,
}

/// Path to an entity, with [`Name`]s. Each entity in a path must have a name.

#[derive(LuaProxy)]
#[proxy(
derive(clone,debug),
remote="EntityPath",
functions[r#"
#[lua(kind = "Method", as_trait = "std::clone::Clone", output(proxy))]
    fn clone(&self) -> EntityPath;
}
"#,
			r#"
#[lua(
        kind = "Method",
        as_trait = "std::cmp::PartialEq",
        composite = "eq",
        metamethod = "Eq",
    )]
    fn eq(&self, #[proxy] other: &EntityPath) -> bool;
}
"#,
			r#"
#[lua(kind = "Method", as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(&self) -> ();
}
"#]
)]

pub struct LuaEntityPath {
    parts: std::vec::Vec<bevy_core::Name>,
}

/// A list of [`VariableCurve`], and the [`EntityPath`] to which they apply.

#[derive(LuaProxy)]
#[proxy(
derive(clone,debug),
remote="AnimationClip",
functions[r#"
/// Duration of the clip, represented in seconds
#[lua(kind = "Method")]
    fn duration(&self) -> f32;
}
"#,
			r#"
/// Add a [`VariableCurve`] to an [`EntityPath`].
#[lua(kind = "Method")]
    fn add_curve_to_path(
        &mut self,
        #[proxy]
        path: EntityPath,
        #[proxy]
        curve: VariableCurve,
    ) -> ();
}
"#,
			r#"
/// Whether this animation clip can run on entity with given [`Name`].
#[lua(kind = "Method")]
    fn compatible_with(&self, #[proxy] name: &bevy_core::Name) -> bool;
}
"#,
			r#"
#[lua(kind = "Method", as_trait = "std::clone::Clone", output(proxy))]
    fn clone(&self) -> AnimationClip;
}
"#]
)]

pub struct LuaAnimationClip {
    curves: std::vec::Vec<std::vec::Vec<VariableCurve>>,

    paths: bevy_utils::hashbrown::HashMap<EntityPath, usize>,

    duration: f32,
}

#[derive(LuaProxy)]
#[proxy(
derive(clone,debug),
remote="PlayingAnimation",
functions[]
)]

pub struct LuaPlayingAnimation {
    repeat: bool,

    speed: f32,

    elapsed: f32,

    animation_clip: bevy_asset::Handle<AnimationClip>,

    path_cache: std::vec::Vec<std::vec::Vec<std::option::Option<bevy_ecs::entity::Entity>>>,
}

/// Animation controls

#[derive(LuaProxy)]
#[proxy(
derive(clone,debug),
remote="AnimationPlayer",
functions[r#"
/// Pause the animation
#[lua(kind = "Method")]
    fn pause(&mut self) -> ();
}
"#,
			r#"
/// Unpause the animation
#[lua(kind = "Method")]
    fn resume(&mut self) -> ();
}
"#,
			r#"
/// Is the animation paused
#[lua(kind = "Method")]
    fn is_paused(&self) -> bool;
}
"#,
			r#"
/// Speed of the animation playback
#[lua(kind = "Method")]
    fn speed(&self) -> f32;
}
"#,
			r#"
/// Time elapsed playing the animation
#[lua(kind = "Method")]
    fn elapsed(&self) -> f32;
}
"#]
)]

pub struct LuaAnimationPlayer {
    paused: bool,

    #[lua(output(proxy))]
    animation: PlayingAnimation,

    transitions: std::vec::Vec<AnimationTransition>,
}

bevy_script_api::util::impl_tealr_generic!(pub(crate) struct T);

#[derive(Default)]
pub(crate) struct Globals;

impl bevy_mod_scripting_lua::tealr::mlu::ExportInstances for Globals {
    fn add_instances<'lua, T: bevy_mod_scripting_lua::tealr::mlu::InstanceCollector<'lua>>(
        self,
        instances: &mut T,
    ) -> bevy_mod_scripting_lua::tealr::mlu::mlua::Result<()> {
        Ok(())
    }
}

pub struct BevyAnimationAPIProvider;

impl bevy_mod_scripting::core::hosts::APIProvider for BevyAnimationAPIProvider {
    type APITarget = Mutex<bevy_mod_scripting_lua::tealr::mlu::mlua::Lua>;
    type ScriptContext = Mutex<bevy_mod_scripting_lua::tealr::mlu::mlua::Lua>;
    type DocTarget = LuaDocFragment;

    fn attach_api(&mut self, ctx: &mut Self::APITarget) -> Result<(), ScriptError> {
        let ctx = ctx
            .get_mut()
            .expect("Unable to acquire lock on Lua context");
        bevy_mod_scripting_lua::tealr::mlu::set_global_env(Globals, ctx)
            .map_err(|e| ScriptError::Other(e.to_string()))
    }

    fn get_doc_fragment(&self) -> Option<Self::DocTarget> {
        Some(LuaDocFragment::new("BevyAnimationAPI", |tw| {
            tw.document_global_instance::<Globals>()
                .expect("Something went wrong documenting globals")
                .process_type::<LuaKeyframes>()
                .process_type::<LuaVariableCurve>()
                .process_type::<LuaEntityPath>()
                .process_type::<LuaAnimationClip>()
                .process_type::<LuaPlayingAnimation>()
                .process_type::<LuaAnimationPlayer>()
        }))
    }

    fn setup_script(
        &mut self,
        script_data: &ScriptData,
        ctx: &mut Self::ScriptContext,
    ) -> Result<(), ScriptError> {
        Ok(())
    }

    fn setup_script_runtime(
        &mut self,
        world_ptr: bevy_mod_scripting_core::world::WorldPointer,
        _script_data: &ScriptData,
        ctx: &mut Self::ScriptContext,
    ) -> Result<(), ScriptError> {
        Ok(())
    }

    fn register_with_app(&self, app: &mut App) {
        app.register_foreign_lua_type::<Keyframes>();

        app.register_foreign_lua_type::<VariableCurve>();

        app.register_foreign_lua_type::<EntityPath>();

        app.register_foreign_lua_type::<AnimationClip>();

        app.register_foreign_lua_type::<PlayingAnimation>();

        app.register_foreign_lua_type::<AnimationPlayer>();
    }
}
