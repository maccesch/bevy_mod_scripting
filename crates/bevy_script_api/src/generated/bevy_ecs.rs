// @generated by cargo bevy-api-gen generate, modify the templates not this file

#![allow(clippy::all, unused_imports, deprecated, dead_code)]
// This file is generatedchange the template not this file
extern crate self as bevy_script_api;

use std::sync::Mutex;
use bevy::prelude::App;
use bevy_mod_scripting_core::prelude::*;

#[cfg(feature = "lua")]
use {
    crate::{lua::RegisterForeignLuaType, ReflectedValue},
    bevy_mod_scripting_lua::docs::LuaDocFragment,
    bevy_mod_scripting_lua_derive::LuaProxy,
};


    
/// Lightweight identifier of an [entity](crate::entity).

/// The identifier is implemented using a [generational index]: a combination of an index and a generation.

/// This allows fast insertion after data removal in an array while minimizing loss of spatial locality.

/// These identifiers are only valid on the [`World`] it's sourced from. Attempting to use an `Entity` to

/// fetch entity components or metadata from a different world will either fail or return unexpected results.

/// [generational index]: https://lucassardois.medium.com/generational-indices-guide-8e3c5f7fd594

/// # Usage

/// This data type is returned by iterating a `Query` that has `Entity` as part of its query fetch type parameter ([learn more]).

/// It can also be obtained by calling [`EntityCommands::id`] or [`EntityMut::id`].

/// ```

/// # use bevy_ecs::prelude::*;

/// # #[derive(Component)]

/// # struct SomeComponent;

/// fn setup(mut commands: Commands) {

///     // Calling `spawn` returns `EntityCommands`.

///     let entity = commands.spawn(SomeComponent).id();

/// }

/// fn exclusive_system(world: &mut World) {

///     // Calling `spawn` returns `EntityMut`.

///     let entity = world.spawn(SomeComponent).id();

/// }

/// #

/// # bevy_ecs::system::assert_is_system(setup);

/// # bevy_ecs::system::assert_is_system(exclusive_system);

/// ```

/// It can be used to refer to a specific entity to apply [`EntityCommands`], or to call [`Query::get`] (or similar methods) to access its components.

/// ```

/// # use bevy_ecs::prelude::*;

/// #

/// # #[derive(Component)]

/// # struct Expired;

/// #

/// fn dispose_expired_food(mut commands: Commands, query: Query<Entity, With<Expired>>) {

///     for food_entity in &query {

///         commands.entity(food_entity).despawn();

///     }

/// }

/// #

/// # bevy_ecs::system::assert_is_system(dispose_expired_food);

/// ```

/// [learn more]: crate::system::Query#entity-id-access

/// [`EntityCommands::id`]: crate::system::EntityCommands::id

/// [`EntityMut::id`]: crate::world::EntityMut::id

/// [`EntityCommands`]: crate::system::EntityCommands

/// [`Query::get`]: crate::system::Query::get

/// [`World`]: crate::world::World


#[derive(LuaProxy)]
#[proxy(
derive(clone,debug),
remote="entity::Entity",
functions[r#"
/// Creates a new entity ID with the specified `index` and a generation of 0.
/// # Note
/// Spawning a specific `entity` value is __rarely the right choice__. Most apps should favor
/// [`Commands::spawn`](crate::system::Commands::spawn). This method should generally
/// only be used for sharing entities across apps, and only when they have a scheme
/// worked out to share an index space (which doesn't happen by default).
/// In general, one should not try to synchronize the ECS by attempting to ensure that
/// `Entity` lines up between instances, but instead insert a secondary identifier as
/// a component.
#[lua(kind = "Function", output(proxy))]
    fn from_raw(index: u32) -> entity::Entity;
}
"#,
			r#"
/// Convert to a form convenient for passing outside of rust.
/// Only useful for identifying entities within the same instance of an application. Do not use
/// for serialization between runs.
/// No particular structure is guaranteed for the returned bits.
#[lua(kind = "Method")]
    fn to_bits(self) -> u64;
}
"#,
			r#"
/// Reconstruct an `Entity` previously destructured with [`Entity::to_bits`].
/// Only useful when applied to results from `to_bits` in the same instance of an application.
#[lua(kind = "Function", output(proxy))]
    fn from_bits(bits: u64) -> entity::Entity;
}
"#,
			r#"
/// Return a transiently unique identifier.
/// No two simultaneously-live entities share the same index, but dead entities' indices may collide
/// with both live and dead entities. Useful for compactly representing entities within a
/// specific snapshot of the world, such as when serializing.
#[lua(kind = "Method")]
    fn index(self) -> u32;
}
"#,
			r#"
/// Returns the generation of this Entity's index. The generation is incremented each time an
/// entity with a given index is despawned. This serves as a "count" of the number of times a
/// given index has been reused (index, generation) pairs uniquely identify a given Entity.
#[lua(kind = "Method")]
    fn generation(self) -> u32;
}
"#,
			r#"
#[lua(kind = "Method", as_trait = "std::cmp::Eq")]
    fn assert_receiver_is_total_eq(&self) -> ();
}
"#,
			r#"
#[lua(kind = "Method", as_trait = "std::clone::Clone", output(proxy))]
    fn clone(&self) -> entity::Entity;
}
"#,
			r#"
#[lua(
        kind = "Method",
        as_trait = "std::cmp::PartialEq",
        composite = "eq",
        metamethod = "Eq",
    )]
    fn eq(&self, #[proxy] other: &entity::Entity) -> bool;
}
"#]
)]




pub struct LuaEntity{
    
    
        generation:u32,


    
        index:u32,


    
    
}


bevy_script_api::util::impl_tealr_generic!(pub(crate) struct T);

#[derive(Default)]
pub(crate) struct Globals;

impl bevy_mod_scripting_lua::tealr::mlu::ExportInstances for Globals {
    fn add_instances<'lua, T: bevy_mod_scripting_lua::tealr::mlu::InstanceCollector<'lua>>(
        self,
        instances: &mut T,
    ) -> bevy_mod_scripting_lua::tealr::mlu::mlua::Result<()> {
         
            
                instances.add_instance("LuaEntity", 
                                bevy_mod_scripting_lua::tealr::mlu::UserDataProxy::<LuaEntity>::new)?;
            
        
        Ok(())
    }
}

pub struct BevyEcsAPIProvider;

impl bevy_mod_scripting::core::hosts::APIProvider for BevyEcsAPIProvider {
        type APITarget = Mutex<bevy_mod_scripting_lua::tealr::mlu::mlua::Lua>;
        type ScriptContext = Mutex<bevy_mod_scripting_lua::tealr::mlu::mlua::Lua>;
        type DocTarget = LuaDocFragment;

    fn attach_api(&mut self, ctx: &mut Self::APITarget) -> Result<(), ScriptError> {
        let ctx = ctx
            .get_mut()
            .expect("Unable to acquire lock on Lua context");
        bevy_mod_scripting_lua::tealr::mlu::set_global_env(Globals, ctx)
            .map_err(|e| ScriptError::Other(e.to_string()))
    }

    fn get_doc_fragment(&self) -> Option<Self::DocTarget> {
        Some(LuaDocFragment::new("BevyEcsAPI", |tw| {
            tw
                .document_global_instance::<Globals>().expect("Something went wrong documenting globals")
            
                .process_type::<LuaEntity>()
                
                .process_type::<bevy_mod_scripting_lua::tealr::mlu::UserDataProxy<LuaEntity>>()
                
            
            }
        ))
    }

    fn setup_script(
        &mut self,
        script_data: &ScriptData,
        ctx: &mut Self::ScriptContext,
    ) -> Result<(), ScriptError> {
        Ok(())
    }

    fn setup_script_runtime(
        &mut self,
        world_ptr: bevy_mod_scripting_core::world::WorldPointer,
        _script_data: &ScriptData,
        ctx: &mut Self::ScriptContext,
    ) -> Result<(), ScriptError> {
        Ok(())
    }

    fn register_with_app(&self, app: &mut App) {
        
        app.register_foreign_lua_type::<entity::Entity>();
        
    }
}